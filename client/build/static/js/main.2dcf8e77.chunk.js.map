{"version":3,"sources":["components/Navbar.js","components/Banner.js","components/Footer.js","components/DataCarousel.js","components/chart/Chart.js","components/chart/Loading.js","components/chart/ChartForm.js","components/chart/ChartSelect.js","components/chart/ChartContainer.js","App.js","index.js"],"names":["Navbar","useState","menuActive","setMenuActive","closeMenu","className","to","onClick","href","target","rel","Banner","Button","endIcon","variant","style","margin","color","Footer","DataCarousel","responseAPI","setResponseAPI","useEffect","console","log","fetch","then","response","ok","json","jsonData","raw_date","date","Date","month","String","getMonth","day","getDate","year","getFullYear","formatDate","data","showArrows","showThumbs","autoPlay","infiniteLoop","swipeable","centerMode","showStatus","stopOnHover","totale_positivi","nuovi_positivi","deceduti","totale_ospedalizzati","terapia_intensiva","tamponi","Chart","labelY","colors","legendProps","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","itemBackground","top","right","bottom","left","xScale","format","type","precision","yScale","stacked","min","max","xFormat","curve","axisBottom","tickValues","tickSize","tickPadding","tickRotation","legend","legendOffset","legendPosition","axisLeft","replace","enableGridX","enablePoints","lineWidth","useMesh","legends","length","slice","Math","floor","map","cur","index","id","label","Loading","promiseInProgress","usePromiseTracker","height","width","ChartForm","field","setField","setSelectedRegions","selectedRegions","selectedChart","addedRegion","setTime","now","time","beginning","diffTime","abs","diffDays","ceil","timeInDays","setTimeInDays","d","Grid","item","container","xs","lg","alignItems","FormControl","InputLabel","Select","multiple","value","onChange","event","MenuProps","getContentAnchorEl","name","MenuItem","Slider","newValue","onChangeCommitted","endDate","startDate","setDate","valueLabelDisplay","aria-labelledby","valueLabelFormat","ValueLabelComponent","props","children","open","Tooltip","enterTouchDelay","placement","title","htmlFor","native","inputProps","ChartSelect","ChartContainer","setSelectedChart","chartData","setChartData","hasLoaded","setHasLoaded","url","formatData","formattedData","days","values","denominazione_regione","formattedDate","push","i","x","y","urlList","concat","forEach","r","newData","promises","trackPromise","Promise","all","createChartData","App","path","exact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2dcf8e77.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './css/Navbar.css';\r\n\r\nexport const Navbar = () => {\r\n    const [menuActive, setMenuActive] = useState(false);\r\n\r\n    const handleClick = () => setMenuActive(!menuActive);\r\n    const closeMenu = () => setMenuActive(false);\r\n    /**\r\n     * @return Ritorna la navbar dell'applicazione. La navbar contiene:\r\n     *              - Il logo\r\n     *              - Il titolo\r\n     *              - I bottoni per la navigazione:\r\n     *                  I. Home => Cliccandolo visualizza la home dell'applicazione\r\n     *                  II. Documentazione API => Cliccandolo porta alla documentazione Swagger della API\r\n     *                  III. Grafici => Cliccandolo visualizza il grafico dei dati.\r\n     */\r\n    return (\r\n        <nav className='navbar'>\r\n            <div className='navbar-container'>\r\n                {/* Title */}\r\n                <div>\r\n                    <Link to='/' className='navbar-logo'>\r\n                        pgCOVAPI <i className='fas fa-viruses' />\r\n                    </Link>\r\n                </div>\r\n\r\n\r\n                {/* Hamburger Menu Icon */}\r\n                <div className='menu-icon' onClick={handleClick}>\r\n                    <i className={menuActive ? 'fas fa-times' : 'fas fa-bars'} />\r\n                </div>\r\n\r\n                {/* Nav items */}\r\n                <ul className={menuActive ? 'nav-menu active' : 'nav-menu'} onClick={closeMenu}>\r\n                    <li className='menu-item'>\r\n                        <Link to='/' className='nav-links' onClick={closeMenu}>Home</Link>\r\n                    </li>\r\n\r\n                    <li className='menu-item'>\r\n                        <a className='nav-links' href='https://ijn-shalma.github.io/pgCOVAPI/' target='_blank' rel='noreferrer'>Documentazione API</a>\r\n                    </li>\r\n\r\n                    <li className='menu-item'>\r\n                        <Link className='nav-links' to='/grafici' onClick={closeMenu}>Grafici</Link>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\nimport './css/Banner.css';\r\n\r\n/**\r\n * @returns Ritorna l'elemento div della pagina Home contenente alcune informazioni riguardo all'utilizzo del sito.\r\n *          All'interno del sito troviamo anche due bottoni:\r\n *              - Github => Quando cliccato porta alla repository del progetto\r\n *              - Documentazione => Quando cliccato porta alla documentazione swagger dell'API\r\n */\r\n\r\nexport const Banner = () => {\r\n\r\n    return (\r\n        <div className='banner-container'>\r\n            <div className='banner-wrapper'>\r\n                <div className=\"banner-content\">\r\n                    <h2 className='title'>pgCOVAPI</h2>\r\n                    <h2 className='title'>Open Data Covid-19 in Italia</h2>\r\n                    <p>Accedi ai dati COVID19 tramite una API ad accesso libero facile da utilizzare.<br/> Visualizza o implementa in altre applicazioni. Dati forniti dal <a href=\"https://github.com/pcm-dpc/COVID-19\">Dipartimento di Protezione Civile</a></p>\r\n                    <Button href=\"https://github.com/IJN-Shalma/pgCOVAPI\" endIcon={<GitHubIcon/>} target=\"_blank\" variant=\"contained\" style={{margin:\"1rem 1rem\"}} color=\"primary\">GitHub</Button>\r\n                    <Button href=\"https://ijn-shalma.github.io/pgCOVAPI/\" endIcon={<DescriptionIcon/>} target=\"_blank\" variant=\"contained\" color=\"primary\">Documentazione API</Button>\r\n                </div>\r\n            </div>\r\n\r\n            <div className='down-button'>\r\n                <i className=\"fas fa-angle-double-down\"></i>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './css/Footer.css'\r\n\r\nexport const Footer = () => {\r\n    /**\r\n     * @return Ritorna il footer della pagina che contiene:\r\n     *          - Autori\r\n     *          - Crediti\r\n     */\r\n    return (\r\n        <div className='footer'>\r\n            <div className=\"authors\">\r\n                <h3>Autori</h3>\r\n                <p>Silvio Caprara</p>\r\n                <p>Pietro Chiartano</p>\r\n                <p>Yun Qing Zhou</p>\r\n            </div>\r\n\r\n            <div className=\"credits\">\r\n                <h3>Extra</h3>\r\n                <p>Progetto Maturità 2021</p>\r\n                <p>5^C Informatica IIS A. Avogadro Torino</p>\r\n                <p>&nbsp;</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\"; // requires a loader\r\nimport { Carousel } from 'react-responsive-carousel';\r\nimport './css/DataCarousel.css'\r\n\r\nexport const DataCarousel = () => {\r\n\r\n    const [responseAPI, setResponseAPI] = useState({})\r\n\r\n    useEffect(() => {\r\n\r\n        const url = \"https://pgcovapi.herokuapp.com/api/nazione/?giorni=1\";\r\n        console.log(\"hello\")\r\n\r\n        fetch(url)\r\n            .then(response => {\r\n                if (response.ok) {\r\n                    return response.json()\r\n                }\r\n            })\r\n            .then((jsonData) => {\r\n                setResponseAPI(jsonData[0]);\r\n                console.log(jsonData[0])\r\n            })\r\n    }, []);\r\n\r\n    function formatDate(raw_date) {\r\n        let date = new Date(raw_date+\"Z\");\r\n        let month = String(date.getMonth() + 1);\r\n        let day = String(date.getDate());\r\n        let year = String(date.getFullYear());\r\n\r\n        return `${day} - ${month} - ${year}`;\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className='carousel-container'>\r\n                <div className='carousel-wrapper'>\r\n                    <p className='today-date'>{formatDate(responseAPI.data)}</p>\r\n                    <Carousel showArrows={false} showThumbs={false} autoPlay infiniteLoop swipeable centerMode showStatus={false} stopOnHover={false}>\r\n                        <div className=\"data-box\">\r\n                            <p className=\"datainfo\">TOTALE POSITIVI</p>\r\n                            <p className=\"data c1\">{responseAPI.totale_positivi}</p>\r\n                        </div>\r\n                        <div className=\"data-box\">\r\n                            <p className=\"datainfo\">NUOVI POSITIVI</p>\r\n                            <p className=\"data c2\">{responseAPI.nuovi_positivi}</p>\r\n                        </div>\r\n                        <div className=\"data-box\">\r\n                            <p className=\"datainfo\">DECEDUTI</p>\r\n                            <p className=\"data c3\">{responseAPI.deceduti}</p>\r\n                        </div>\r\n                        <div className=\"data-box\">\r\n                            <p className=\"datainfo\">OSPEDALIZZATI</p>\r\n                            <p className=\"data c4\">{responseAPI.totale_ospedalizzati}</p>\r\n                        </div>\r\n                        <div className=\"data-box\">\r\n                            <p className=\"datainfo\">TERAPIA INTENSIVA</p>\r\n                            <p className=\"data c5\">{responseAPI.terapia_intensiva}</p>\r\n                        </div>\r\n                        <div className=\"data-box\">\r\n                            <p className=\"datainfo\">TAMPONI</p>\r\n                            <p className=\"data c5\">{responseAPI.tamponi}</p>\r\n                        </div>\r\n                    </Carousel>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport { ResponsiveLine } from '@nivo/line';\r\n\r\nexport const Chart = ({data, labelY}) => {\r\n// 21 colori corrispondenti alle 21 regioni selezionabili (19 regioni, 2 P.A.)\r\nconst colors = ['#eb4034','#eb9634','#ebdc34','#c1e010','#80eb07','#0dd41a','#44e37c','#31e8cd','#1ccfd9','#0fafdb','#0f79d6','#1444e0','#2f2196','#6e18c4','#6e18c4','#cf13bc','#c90e5c','#de0b35','#ff191d','#176b0e','#550e57']\r\n\r\n// creazione legenda della linea quando il mouse va in hover su di essa\r\nconst legendProps =\r\n    {\r\n        anchor: 'top-left',\r\n        direction: 'column',\r\n        justify: false,\r\n        translateX: -50,\r\n        translateY: -190,\r\n        itemsSpacing: 2,\r\n        itemDirection: 'left-to-right',\r\n        itemWidth: 80,\r\n        itemHeight: 12,\r\n        itemOpacity: 0.75,\r\n        symbolSize: 10,\r\n        symbolShape: 'circle',\r\n        symbolBorderColor: 'rgba(0, 0, 0, .5)',\r\n        effects: [\r\n            {\r\n                on: 'hover',\r\n                style: {\r\n                    itemBackground: 'rgba(0, 0, 0, .03)',\r\n                    itemOpacity: 1\r\n                }\r\n            }\r\n        ]\r\n    };\r\n    // Grafico\r\n    return (\r\n        <>\r\n        <ResponsiveLine\r\n\t\tdata={data}\r\n\t\tmargin={{\r\n\t\t\ttop: 200,\r\n\t\t\tright: 40,\r\n\t\t\tbottom: 80,\r\n\t\t\tleft: 80\r\n\t\t}}\r\n\t\txScale={{\r\n            format: '%d-%m-%Y',\r\n            type: 'time',\r\n            precision: 'day'\r\n\t\t}}\r\n\t\tyScale={{\r\n\t\t\ttype: 'linear',\r\n\t\t\tstacked: false,\r\n\t\t    min: 'auto',\r\n\t\t\tmax: 'auto'\r\n        }}\r\n        xFormat=\"time:%d-%m-%Y\"\r\n        curve=\"monotoneX\"\r\n\t\taxisBottom={{\r\n            tickValues: 'every month',\r\n\t\t\ttickSize: 10,\r\n\t\t\ttickPadding: 5,\r\n\t\t\ttickRotation: 45,\r\n\t\t\tlegend: \"Data\",\r\n\t\t\tlegendOffset: 60,\r\n            legendPosition: \"middle\",\r\n            format: \"%Y-%b\"\r\n\t\t}}\r\n\t\taxisLeft={{\r\n\t\t\ttickSize: 0,\r\n\t\t\ttickPadding: 0,\r\n\t\t\ttickRotation: 0,\r\n\t\t\tlegend: labelY.replace(\"_\",\" \"),\r\n\t\t\tlegendOffset: -60,\r\n\t\t\tlegendPosition: \"middle\"\r\n\t\t}}\r\n        enableGridX={false}\r\n        colors={colors}\r\n        enablePoints={false}\r\n        lineWidth={3}\r\n        useMesh={true}\r\n\t\tlegends={\r\n            data && data.length <= 11 ? \r\n            [{\r\n                ...legendProps,\r\n                symbolSize: 18,\r\n                itemsSpacing: 4\r\n            }]\r\n            : \r\n            [\r\n                {\r\n                  ...legendProps,\r\n                  symbolSize: 10,\r\n                  itemsSpacing: 2,\r\n                  translateX: 0,\r\n                  data: data\r\n                    .slice(0, Math.floor(data.length / 2))\r\n                    .map((cur, index) => ({\r\n                      id: cur.id,\r\n                      label: cur.id,\r\n                      color: colors\r\n                        .slice(0, Math.floor(data.length / 2))[index],\r\n                    })),\r\n                },\r\n                {\r\n                  ...legendProps,\r\n                  symbolSize: 10,\r\n                  itemsSpacing: 2,\r\n                  translateX: 120,\r\n                  data: data\r\n                    .slice(Math.floor(data.length / 2))\r\n                    .map((cur, index) => ({\r\n                      id: cur.id,\r\n                      label: cur.id,\r\n                      color: colors\r\n                        .slice(Math.floor(data.length / 2))[index],\r\n                    })),\r\n                },\r\n              ]\r\n        }\r\n\t/>\r\n    </>\r\n    );\r\n}","import React from 'react';\r\nimport {usePromiseTracker} from 'react-promise-tracker';\r\nimport Loader from 'react-loader-spinner';\r\nimport '../css/Loading.css';\r\n\r\nexport const Loading = () => \r\n{\r\n    const {promiseInProgress} = usePromiseTracker();\r\n    /**\r\n     * @return Ritorna.\r\n     */\r\n    return(\r\n        <>\r\n            {promiseInProgress && \r\n            <div className=\"loading\">\r\n                <Loader type=\"RevolvingDot\" color=\"#2E8BC0\" height=\"100\" width=\"100\"/>\r\n            </div>}\r\n        </>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport {Grid, Select, FormControl, InputLabel, MenuItem, Slider, Tooltip} from '@material-ui/core';\r\n\r\n// Possibili regioni selezionabili all'interno del form\r\nexport const ChartForm = ({field, className, setField, setSelectedRegions, selectedRegions, addedRegion, selectedChart, setTime, time}) => {\r\n    const regionNames = [    \r\n        \"Abruzzo\",\r\n        \"Basilicata\",\r\n        \"Calabria\",\r\n        \"Campania\",\r\n        \"Emilia-Romagna\",\r\n        \"Friuli Venezia Giulia\",\r\n        \"Lazio\",\r\n        \"Liguria\",\r\n        \"Lombardia\",\r\n        \"Marche\",\r\n        \"Molise\",\r\n        \"Piemonte\",\r\n        \"Puglia\",\r\n        \"Sardegna\",\r\n        \"Sicilia\",\r\n        \"Toscana\",\r\n        \"Umbria\",\r\n        \"Valle d'Aosta\",\r\n        \"Veneto\",\r\n        \"P.A. Trento\",\r\n        \"P.A. Bolzano\"\r\n    ];\r\n\r\n    const now = new Date();\r\n    const beginning = new Date('2020/02/02');\r\n    const diffTime = Math.abs(now - beginning);\r\n    const diffDays = -Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n\r\n    const [timeInDays, setTimeInDays] = useState([diffDays, 0]);\r\n\r\n    function formatDate(d){\r\n        let month = String(d.getMonth() + 1);\r\n        let day = String(d.getDate());\r\n        let year = String(d.getFullYear());\r\n      \r\n        if (month.length < 2) month = '0' + month;\r\n        if (day.length < 2) day = '0' + day;\r\n        return `${year}-${month}-${day}`;  \r\n    }\r\n\r\n    function valueText(value){\r\n        let date = new Date();\r\n        date.setDate(date.getDate()+value);\r\n        let dateString = `${date.getDate()}/${date.getMonth()+1}/${date.getFullYear()}`;\r\n\r\n        return dateString;\r\n    } \r\n\r\n    function ValueLabelComponent(props) {\r\n        const { children, open, value } = props;\r\n      \r\n        return (\r\n          <Tooltip open={open} enterTouchDelay={0} placement=\"top\" title={value}>\r\n            {children}\r\n          </Tooltip>\r\n        );\r\n      }\r\n    /**\r\n     * @return Ritorna il form per la gestione dei dati relativi alle regioni italiane o all'intera italia.\r\n     *         All'interno del form è possibile selezionare:\r\n     *              - Regioni di cui visualizzare i dati (da migliorare forse con dei checkbox)\r\n     *              - Inizio intervallo \r\n     *              - Fine intervallo\r\n     *              - Dato da visualizzare\r\n     */\r\n    return (\r\n        <>\r\n            <Grid className={className} item container xs={12} lg={4} justify=\"center\" alignItems=\"center\" direction=\"column\">\r\n                {selectedChart === 'regioni' &&\r\n                 <FormControl>\r\n                    <InputLabel>Regione</InputLabel>\r\n                        <Select \r\n                            multiple\r\n                            id=\"region-selector\"\r\n                            style={{width:\"10rem\"}}\r\n                            value={selectedRegions}\r\n                            onChange={(event) => {\r\n                                setSelectedRegions(() =>  event.target.value);\r\n                            }}\r\n                            MenuProps={{getContentAnchorEl: () => null}}>\r\n\r\n                        {regionNames.map((name) => (\r\n                            <MenuItem key={name} value={name}>\r\n                                {name}\r\n                            </MenuItem>\r\n                        ))}\r\n                        </Select>\r\n                    </FormControl>}\r\n\r\n                    <InputLabel>\r\n                        Intervallo di Tempo\r\n                    </InputLabel>\r\n                    <Slider\r\n                    value={timeInDays}\r\n                    onChange={ (event, newValue) => setTimeInDays(newValue)}\r\n                    onChangeCommitted={(event, newValue)=>{\r\n                        setTime(()=>{\r\n                        let endDate = new Date();\r\n                        let startDate = new Date();\r\n\r\n                        endDate.setDate(endDate.getDate()+timeInDays[1]);\r\n                        startDate.setDate(startDate.getDate()+timeInDays[0]);\r\n                        return {\r\n                            'date-start': formatDate(startDate),\r\n                            'date-end': formatDate(endDate)\r\n                            }\r\n                        }\r\n                    )}}\r\n                    valueLabelDisplay=\"auto\"\r\n                    aria-labelledby=\"range-slider\"\r\n                    valueLabelFormat={valueText}\r\n                    ValueLabelComponent={ValueLabelComponent}\r\n                    max={0}\r\n                    min={diffDays}\r\n                    />\r\n\r\n                <FormControl>\r\n                    <InputLabel htmlFor=\"field\">Field</InputLabel>\r\n                        <Select \r\n                            native\r\n                            onChange={(event) => {\r\n                                setField(event.target.value);\r\n                            }}\r\n                            inputProps={{ \r\n                                name: 'field',\r\n                                id: 'field'\r\n                            }}\r\n\r\n                            value={field}\r\n                        >\r\n                            <option value=\"totale_positivi\">Totale Positivi</option>\r\n                            <option value=\"ricoverati_con_sintomi\">Ricoverati con Sintomi</option>\r\n                            <option value=\"terapia_intensiva\">Terapia Intensiva</option>\r\n                            <option value=\"totale_ospedalizzati\">Totale Ospedalizzati</option>\r\n                            <option value=\"isolamento_domiciliare\">Isolamento Domiciliare</option>\r\n                            <option value=\"variazione_totale_positivi\">Variazione Totale Positivi</option>\r\n                            <option value=\"nuovi_positivi\">Nuovi Positivi</option>\r\n                            <option value=\"dimessi_guariti\">Dimessi Guariti</option>\r\n                            <option value=\"deceduti\">Deceduti</option>\r\n                            <option value=\"totale_casi\">Totale Casi</option>\r\n                            <option value=\"tamponi\">Tamponi</option>\r\n                            <option value=\"casi_testati\">Casi Testati</option>\r\n                            <option value=\"ingressi_terapia_intensiva\">Ingerssi in Terapia Intensiva</option>\r\n                            <option value=\"totale_positivi_test_molecolare\">Totale Positivi Test Molecolare</option>\r\n                            <option value=\"totale_positivi_test_antigenico_rapido\">Totale Positivi Test Antigenico Rapido</option>\r\n                            <option value=\"tamponi_test_molecolare\">Tamponi Test Molecolare</option>\r\n                            <option value=\"tamponi_test_antigenico_rapido\">Tamponi Test Antigenico Rapido</option>\r\n                        </Select>\r\n                </FormControl>\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {Grid,Button} from '@material-ui/core';\r\n\r\nexport const ChartSelect = ({onClick}) => {\r\n    /**\r\n     * @return Ritorna una grid contenente due bottoni:\r\n     *              - Grafico Andamento Nazionale => Mostra i dati del covid di tutta Italia\r\n     *              - Grafico Andamento Regionale => Mostra i dati del covid relativi alle singole regioni d'Italia selezionate nel RegionForm\r\n     */\r\n    return (\r\n        <>\r\n            <Grid container item xs={12} justify=\"center\" alignItems=\"center\" className=\"chart-select\">\r\n                <Button variant=\"contained\" style={{margin:\"1rem 1rem\"}} color=\"primary\" onClick={() => onClick(\"nazione\")}>Grafico Andamento Nazionale</Button>\r\n                <Button variant=\"contained\" style={{margin:\"1rem 1rem\"}} color=\"primary\" onClick={()=>onClick(\"regioni\")}>Grafico Andamento Regionale</Button>\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\n","import React, {useEffect,useState} from 'react';\r\nimport {trackPromise} from 'react-promise-tracker';\r\nimport {Grid} from '@material-ui/core';\r\nimport {Chart} from './Chart';\r\nimport {Loading} from './Loading';\r\nimport {ChartForm} from './ChartForm';\r\nimport {ChartSelect} from './ChartSelect';\r\n\r\nimport '../css/ChartContainer.css';\r\n\r\nexport const ChartContainer = () => {\r\n    const [time, setTime] = useState({});\r\n    const [field, setField] = useState(\"totale_positivi\"); // selected field (campo)\r\n    const [selectedChart, setSelectedChart] = useState(\"nazione\"); // selected chart (nazione / regioni)\r\n    const [selectedRegions, setSelectedRegions] = useState([]); // list of selected Regions\r\n    const [chartData, setChartData] = useState([]); // chart Data\r\n    \r\n    const [hasLoaded, setHasLoaded] = useState(false);\r\n    \r\n    useEffect(() => {\r\n        const formatDate = d => {\r\n            let month = String(d.getMonth() + 1);\r\n            let day = String(d.getDate());\r\n            let year = String(d.getFullYear());\r\n          \r\n            if (month.length < 2) month = '0' + month;\r\n            if (day.length < 2) day = '0' + day;\r\n            return `${day}-${month}-${year}`;  \r\n        }\r\n    \r\n        const formatData = json => {\r\n            /* console.log(data) */\r\n            let formattedData = [];\r\n            let days = [];\r\n            let values = [];\r\n            let id = json[0].denominazione_regione || 'Italia';\r\n    \r\n            json.map(day =>{\r\n                let date = new Date(day.data+\"Z\");\r\n                let formattedDate = formatDate(date);\r\n                /* console.log(formattedDate) */\r\n                days.push(formattedDate);\r\n                \r\n                values.push(day[field]);\r\n                return true;\r\n            })\r\n            \r\n            for (let i=0; i<days.length;i++){\r\n                formattedData[i] = {\r\n                    x: days[i],\r\n                    y: values[i]\r\n                }\r\n            }\r\n    \r\n            return {formattedData, id};\r\n        }\r\n    \r\n        const createChartData = (urlList) => {\r\n            let newData = [];\r\n            let promises = [];\r\n            \r\n            urlList.forEach(url => {\r\n                promises.push(\r\n                    trackPromise(\r\n                        fetch(url)\r\n                        .then(response => {\r\n                            if(response.ok){\r\n                                return response.json();\r\n                            }\r\n                        })\r\n                        .then(jsonData => {\r\n                            let data = formatData(jsonData);\r\n                            newData.push(\r\n                                {\r\n                                    \"id\": data.id,\r\n                                    \"color\": \"hsl(214, 70%, 50%)\",\r\n                                    \"data\" : data.formattedData\r\n                                }\r\n                            );\r\n                        })\r\n                    )  \r\n                );\r\n            });\r\n            \r\n            Promise.all(promises).then(() =>{\r\n                setChartData(newData);\r\n            })\r\n        }\r\n\r\n        let urlList = [];\r\n        let url;\r\n        setHasLoaded(false);\r\n\r\n        if(selectedChart === 'nazione'){\r\n            // eslint-disable-next-line\r\n            url = `https://pgCOVAPI.herokuapp.com/api/${selectedChart}/`;\r\n            url = url.concat(`/?campo=${field}`);\r\n            if(time && time['date-start'] < time['date-end']){\r\n                url = url.concat(`&dataInizio=${time['date-start']}&dataFine=${time['date-end']}`);\r\n            }\r\n            urlList.push(url);\r\n        }else if(selectedChart === 'regioni'){\r\n            if(selectedRegions.length > 0){\r\n                selectedRegions.forEach(r => {\r\n                    url = `https://pgCOVAPI.herokuapp.com/api/${selectedChart}/`;\r\n                    url = url.concat(r);\r\n                    url = url.concat(`/?campo=${field}`);\r\n                    if(time && time['date-start'] < time['date-end']){\r\n                        url = url.concat(`&dataInizio=${time['date-start']}&dataFine=${time['date-end']}`);\r\n                    }\r\n\r\n                    urlList.push(url);\r\n                });\r\n            }\r\n        }\r\n        \r\n        createChartData(urlList);\r\n\r\n    }, [field, time, selectedRegions, selectedChart])\r\n\r\n    useEffect(() => {\r\n        setHasLoaded(true);\r\n    }, [chartData])\r\n\r\n    return (\r\n        /**\r\n         * @return Ritorna il grid contenente il grafico selezionato nel ChartSelect\r\n         */\r\n        <Grid container className=\"chart-container-wrapper\">\r\n            <ChartSelect onClick={setSelectedChart}></ChartSelect>\r\n\r\n            <Grid item xs={12} lg={8} className = \"chart-container\" >\r\n                <Loading/>\r\n                {hasLoaded && (<Chart data={chartData} labelY={field}/>)}\r\n            </Grid>\r\n\r\n            <ChartForm className=\"form-container\" time={time} setTime={setTime} setField={setField} setSelectedRegions={setSelectedRegions} selectedRegions={selectedRegions} selectedChart={selectedChart}/>\r\n            \r\n        </Grid>\r\n    )\r\n}","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport { Navbar } from './components/Navbar';\r\nimport { Banner } from './components/Banner';\r\nimport { Footer } from './components/Footer';\r\nimport { DataCarousel } from './components/DataCarousel';\r\nimport { ChartContainer } from './components/chart/ChartContainer';\r\n\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n  return (\r\n    <>\r\n      <Router>\r\n        <Navbar />\r\n        <Switch>\r\n          <Route path='/' exact>\r\n            <Banner />\r\n            <DataCarousel/>\r\n          </Route>\r\n          <Route path='/grafici'>\r\n            <ChartContainer />\r\n          </Route>\r\n        </Switch>\r\n        <Footer />\r\n      </Router>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App/>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}